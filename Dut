import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import java.io.*;
import java.security.MessageDigest;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * Personal library
 */

public final class Dut {


    public static class fileUtilities {
        private static File file;

        public static boolean doesFileExist(String filePath) {
            boolean b = false;
            try {
                File file = new File(filePath);
                if (file.exists() && file.isFile()) {
                    b = true;
                }
            } catch (Exception e) {
                b = false;
            }
            return b;
        }

        public static File getFile(String filePath) {
            File file;
            try {
                file = new File(filePath);
            } catch (Exception e) {
                file = null;
                e.printStackTrace();
            }
            return file;

        }
        public static void setFile(String filePath) {
            file = getFile(filePath);
        }


        public static String getFileText(String filePath){
            String fileText="";
            try {
                String addText;
                File file = getFile(filePath);
                FileReader fileReader = new FileReader(file);
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                while((addText=bufferedReader.readLine())!=null){
                    fileText += addText;
                }

            } catch(Exception e){e.printStackTrace();}
            return fileText;
        }

        public static String getExtension(String path) {
            int i = path.lastIndexOf(".");
            return path.substring(i+1);
        }
        public static String getExtension(File file){
            return getExtension(file.getAbsolutePath());
        }

        private static byte[] readBytes(File file) {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            try
            {
                InputStream inputStream = new FileInputStream(file);
                BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream);
                int count = 0;
                byte[] buf = new byte[16384];
                while ((count=bufferedInputStream.read(buf)) != -1) {
                    if (count > 0) byteArrayOutputStream.write(buf, 0, count);
                }
                bufferedInputStream.close();
            }
            catch (Exception e) { e.printStackTrace(); }

            return byteArrayOutputStream.toByteArray();
        }
        private static char[] readChars(File file){
            CharArrayWriter charArrayWriter = new CharArrayWriter();
            try
            {
                FileReader fileReader = new FileReader(file);
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                int count = 0;
                char[] buf = new char[16384];
                while ((count=bufferedReader.read(buf)) != -1) {
                    if (count > 0) charArrayWriter.write(buf, 0, count);
                }
                bufferedReader.close();
            }
            catch (Exception e) { e.printStackTrace(); }

            return charArrayWriter.toCharArray();
        }


        private static void writeToFile(File file, char[] data) {
            try {
                FileWriter fileWriter = new FileWriter(file);
                BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
                bufferedWriter.write(data);
                bufferedWriter.close();
            }
            catch (Exception e) { e.printStackTrace(); }

    }
        private static void writeToFile(File file, byte[] data) {
            try {
                FileOutputStream fileOutputStream = new FileOutputStream(file);
                BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(fileOutputStream);
                bufferedOutputStream.write(data);
                bufferedOutputStream.close();
            }
            catch (Exception e) { e.printStackTrace(); }

        }



    public static class stringUtilities{

        public static HashMap getParameters(String FullURL){
            HashMap splitParams = new HashMap();
            String[] params = null;
            String[] args=null;

            try{
                params = FullURL.split("\\?")[1].split("&");
                int i=0;
                for(i=0; i<=params.length-1 ; i++){
                    args = params[i].split("=");
                    splitParams.put(args[0],args[1]);

                }

            }catch (Exception e){e.printStackTrace();}



            return splitParams;
        }


    }


public static class DennyScriptUtilities{

    public static HashMap<Integer, String> getScripts(String HTML){
        HashMap<Integer,String> scripts= new HashMap();
        Pattern pattern = Pattern.compile("<@ds.*?ds@>");
        Matcher matcher = pattern.matcher(HTML);
        int i = 0;
        while(matcher.find()){
            scripts.put(i, matcher.group(0));
            i++;
        }


        return scripts;
    }





}

public static class encUtilities{
//hash with three constructors



        public static String hash(String PreHash) {
            String PostHash = hash(PreHash, "");
            return PostHash;
        }

        public static String hash(String PreHash, String Salt) {
            //Defaults to SHA-256 if none is specified

            String PostHash = hash(PreHash, Salt, "SHA-256");
            return PostHash;
        }

        public static String hash(String PreHash, String Salt, String Method) {

            String PostHash = "";
            String PreHashWithSalt = PreHash + Salt;
            try {
                System.out.println(PreHashWithSalt.getBytes());
                MessageDigest messageDigest = MessageDigest.getInstance(Method);
                messageDigest.update(PreHashWithSalt.getBytes());
                PostHash = new String(byteArrayToHexString(messageDigest.digest()));

                System.out.println(PostHash);

            } catch (Exception e) {
                e.printStackTrace();
            }
            return PostHash;
        }



    public static String base64decode(String stringToDecode){
        String decodedString = "";
        try{
            BASE64Decoder base64Decoder = new BASE64Decoder();
            decodedString = new String(base64Decoder.decodeBuffer(stringToDecode),"UTF-8");
        }
        catch(Exception e){e.printStackTrace();}
        return decodedString;
    }
    public static String base64encode(String stringToEncode)    {
        String encodedString = null;
        BASE64Encoder base64Encoder = new BASE64Encoder();
        encodedString = new String(base64Encoder.encodeBuffer(stringToEncode.getBytes()));

        return encodedString;
    }

    public static File base64encode(File fileToEncode)    {

        File encodedFile = null;
        try {
            BASE64Encoder base64Encoder = new BASE64Encoder();
            FileReader fileReader = new FileReader(fileToEncode);
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            //encodedString = base64Encoder.encode(stringToEncode.getBytes());
        } catch(Exception e){e.printStackTrace();}
        return encodedFile;
    }


        private static String byteArrayToHexString(byte[] b) { //borrowed from SO 4895523
            String result = "";
            for (int i = 0; i < b.length; i++) {
                result +=
                        Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
            }
            return result;
        }


    }


}}




